
1. Check version : 
		python -m django --version
		3.0.4

2. Create project : 
		django-admin startproject expense_backend
		
		
3. Add readme file  
		touch readme.md
		git add readme.md
		git commit -m "First commit " 
		
4. Move to develop branch 
		git checkout -b develop

5. Add git ignore file 

6. Add my_notes.txt file and add it to git ignore : 
		commit the git ignore 
		
7. Deal with secrate key : 
		store in os.env
		source : https://able.bio/rhett/how-to-set-and-get-environment-variables-in-python--274rgt5#:~:text=Storing%20local%20env%20variables,-You%20should%20write&text=First%20install%20Python%20Decouple%20into%20your%20local%20Python%20environment.&text=Once%20installed%2C%20create%20a%20.,to%20add%20your%20environment%20variables.&text=Then%20save%20(WriteOut)%20the%20file%20and%20exit%20nano.
		
		
8. Adding more file to gitignore 
		few standard pratice and a refrence link : 
		https://djangowaves.com/tips-tricks/gitignore-for-a-django-project/
		
		
9. Add all py files that are necessary  with 
		git add  . 
		
		
10. add origin remote and push -u 

11. Clear all other files  


12. Fix on heruko this time  :: https://developer.mozilla.org/en-US/docs/Learn/Server-side/Django/Deployment 



13. Add user app for handeling login and logout
		python manage.py startapp user 
		add userconfig to setting file 
		
		
		
14. Making default table for users  : 
		python manage.py migrate   :: creates all these tables  :: 
		Operations to perform:
		  Apply all migrations: admin, auth, contenttypes, sessions
		Running migrations:
		  Applying contenttypes.0001_initial... OK
		  Applying auth.0001_initial... OK
		  Applying admin.0001_initial... OK
		  Applying admin.0002_logentry_remove_auto_add... OK
		  Applying admin.0003_logentry_add_action_flag_choices... OK
		  Applying contenttypes.0002_remove_content_type_name... OK
		  Applying auth.0002_alter_permission_name_max_length... OK
		  Applying auth.0003_alter_user_email_max_length... OK
		  Applying auth.0004_alter_user_username_opts... OK
		  Applying auth.0005_alter_user_last_login_null... OK
		  Applying auth.0006_require_contenttypes_0002... OK
		  Applying auth.0007_alter_validators_add_error_messages... OK
		  Applying auth.0008_alter_user_username_max_length... OK
		  Applying auth.0009_alter_user_last_name_max_length... OK
		  Applying auth.0010_alter_group_name_max_length... OK
		  Applying auth.0011_update_proxy_permissions... OK
		  Applying sessions.0001_initial... OK
		  
15. Access user model 
		from djnago.contrib.auth.models import User		
		print(User.objects.all())
		
16. Create super user 
		python manage.py createsuperuser
		login to admin page using :: host/admin 
		
		
17 : Missed data on passowrd reset, password recovery , email config  , jwt setup , new profile  model ,signals  
		signals  : https://docs.djangoproject.com/en/3.1/topics/signals/
		
		
18  Fat Models : 
		here we are defining methods in the model 
		You should write fat models, skinny views.

		Break logic into small methods on your models. This allows you use it multiple times from multiple sources (admin interface UI, front-end UI, API endpoints, multiple views) in a few lines of code instead of copy-pasting tons of code. So next time youâ€™re sending a user an email, extend the model with an email function instead of writing this logic in your controller.

		This also makes your code easier to unit test because you can test the email logic in one place, rather than repeatedly in every controller where this takes place.
		
		https://www.reddit.com/r/django/comments/hqbu4z/how_to_write_fat_models_and_skinny_views/
		
		 If you have two views(template and api) and code repeats - put either in model or utils.
		 
		 
		One good way to do that from the beginning is to ask yourself:

		How will I write a unit test for this?

		How can I run this without an HTTP request? ex. through the Django shell

		Is this part of my view something that could be reusable somewhere else? Ex. reactivating a user

		How can I do this without depending on the request object?

		Your views should have the least possible responsibilities, which normally means they should only do stuff like authentication, validating user input (using forms or DRF serializers) and calling the business logic that's written somewhere else.
		
		My view logic is normally like this: check args/kwargs or request data, pass said info to some function or model method, check the result, if success, return success response, if not, return error response. This pattern accounts for most views I write. My views are always as short as possible and contain almost no logic aside from what error to return on failure.
		
		
		
19  side track .. learning mistakes  ::: https://www.toptal.com/django/django-top-10-mistakes
		
20 pillow overidding model to save images with reduced size 

21 exploring  django-adminlte-3

22  editing django admin py  :: 
	docs.djangoproject.com/en/3.1/ref/contrib/admin/actions/
	
23 login to app !  session based  
		from django.contrib.auth import views as auth_views >> use this  
		path('login/', auth_views.LoginView.as_view(template_name='users/login.html'), name='login'),
		just define how you want the login front end page  and voila yu are authenticated  
		
24 	managers  in models : 
		the idea of fatty models and keeping view clean 
		start with new viiew for profile accessable from admin only  .. great ! 
		now create a new manager in profile  ... showing only certain model 
		
		Adding username  as finl which is nested 
		username = serializers.CharField(read_only=True, source="user.username")
		
	

		
		
